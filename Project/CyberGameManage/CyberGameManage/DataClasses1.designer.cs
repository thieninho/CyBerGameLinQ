#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CyberGameManage
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QuanLyQuanNet2")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertBill(Bill instance);
    partial void UpdateBill(Bill instance);
    partial void DeleteBill(Bill instance);
    partial void InsertBillInfo(BillInfo instance);
    partial void UpdateBillInfo(BillInfo instance);
    partial void DeleteBillInfo(BillInfo instance);
    partial void InsertComputerOrder(ComputerOrder instance);
    partial void UpdateComputerOrder(ComputerOrder instance);
    partial void DeleteComputerOrder(ComputerOrder instance);
    partial void InsertOrderCategory(OrderCategory instance);
    partial void UpdateOrderCategory(OrderCategory instance);
    partial void DeleteOrderCategory(OrderCategory instance);
    partial void InsertOrderr(Orderr instance);
    partial void UpdateOrderr(Orderr instance);
    partial void DeleteOrderr(Orderr instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::CyberGameManage.Properties.Settings.Default.QuanLyQuanNet2ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Bill> Bills
		{
			get
			{
				return this.GetTable<Bill>();
			}
		}
		
		public System.Data.Linq.Table<BillInfo> BillInfos
		{
			get
			{
				return this.GetTable<BillInfo>();
			}
		}
		
		public System.Data.Linq.Table<ComputerOrder> ComputerOrders
		{
			get
			{
				return this.GetTable<ComputerOrder>();
			}
		}
		
		public System.Data.Linq.Table<OrderCategory> OrderCategories
		{
			get
			{
				return this.GetTable<OrderCategory>();
			}
		}
		
		public System.Data.Linq.Table<Orderr> Orderrs
		{
			get
			{
				return this.GetTable<Orderr>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.USP_GetAccountByUserName")]
		public ISingleResult<USP_GetAccountByUserNameResult> USP_GetAccountByUserName([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string userName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userName);
			return ((ISingleResult<USP_GetAccountByUserNameResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.USP_GetComputerList")]
		public ISingleResult<USP_GetComputerListResult> USP_GetComputerList()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<USP_GetComputerListResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.USP_GetListBillByDate")]
		public ISingleResult<USP_GetListBillByDateResult> USP_GetListBillByDate([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> checkIn, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> checkOut)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), checkIn, checkOut);
			return ((ISingleResult<USP_GetListBillByDateResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.USP_GetListBillByDateAndPage")]
		public ISingleResult<USP_GetListBillByDateAndPageResult> USP_GetListBillByDateAndPage([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> checkIn, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> checkOut, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> page)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), checkIn, checkOut, page);
			return ((ISingleResult<USP_GetListBillByDateAndPageResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.USP_GetListBillByDateForReport")]
		public ISingleResult<USP_GetListBillByDateForReportResult> USP_GetListBillByDateForReport([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> checkIn, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> checkOut)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), checkIn, checkOut);
			return ((ISingleResult<USP_GetListBillByDateForReportResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.USP_GetNumBillByDate")]
		public ISingleResult<USP_GetNumBillByDateResult> USP_GetNumBillByDate([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> checkIn, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> checkOut)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), checkIn, checkOut);
			return ((ISingleResult<USP_GetNumBillByDateResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.USP_InsertBill")]
		public int USP_InsertBill([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> idComputer)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), idComputer);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.USP_InsertBillInfo")]
		public int USP_InsertBillInfo([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> idBill, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> idOrder, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> count)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), idBill, idOrder, count);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.USP_Login")]
		public ISingleResult<USP_LoginResult> USP_Login([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string userName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string passWord)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userName, passWord);
			return ((ISingleResult<USP_LoginResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.USP_SwitchComputer")]
		public void USP_SwitchComputer([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> idComputer1, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> idComputer2)
		{
			this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), idComputer1, idComputer2);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.USP_UpdateAccount")]
		public int USP_UpdateAccount([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string userName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string displayName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string password, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string newPassword)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userName, displayName, password, newPassword);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserName;
		
		private string _DisplayName;
		
		private string _PassWord;
		
		private int _Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnPassWordChanging(string value);
    partial void OnPassWordChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    #endregion
		
		public Account()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassWord", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string PassWord
		{
			get
			{
				return this._PassWord;
			}
			set
			{
				if ((this._PassWord != value))
				{
					this.OnPassWordChanging(value);
					this.SendPropertyChanging();
					this._PassWord = value;
					this.SendPropertyChanged("PassWord");
					this.OnPassWordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bill")]
	public partial class Bill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.DateTime _DateCheckIn;
		
		private System.Nullable<System.DateTime> _DateCheckOut;
		
		private int _idComputer;
		
		private int _status;
		
		private System.Nullable<double> _totalPrice;
		
		private System.Nullable<int> _discount;
		
		private EntitySet<BillInfo> _BillInfos;
		
		private EntityRef<ComputerOrder> _ComputerOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnDateCheckInChanging(System.DateTime value);
    partial void OnDateCheckInChanged();
    partial void OnDateCheckOutChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCheckOutChanged();
    partial void OnidComputerChanging(int value);
    partial void OnidComputerChanged();
    partial void OnstatusChanging(int value);
    partial void OnstatusChanged();
    partial void OntotalPriceChanging(System.Nullable<double> value);
    partial void OntotalPriceChanged();
    partial void OndiscountChanging(System.Nullable<int> value);
    partial void OndiscountChanged();
    #endregion
		
		public Bill()
		{
			this._BillInfos = new EntitySet<BillInfo>(new Action<BillInfo>(this.attach_BillInfos), new Action<BillInfo>(this.detach_BillInfos));
			this._ComputerOrder = default(EntityRef<ComputerOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCheckIn", DbType="Date NOT NULL")]
		public System.DateTime DateCheckIn
		{
			get
			{
				return this._DateCheckIn;
			}
			set
			{
				if ((this._DateCheckIn != value))
				{
					this.OnDateCheckInChanging(value);
					this.SendPropertyChanging();
					this._DateCheckIn = value;
					this.SendPropertyChanged("DateCheckIn");
					this.OnDateCheckInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCheckOut", DbType="Date")]
		public System.Nullable<System.DateTime> DateCheckOut
		{
			get
			{
				return this._DateCheckOut;
			}
			set
			{
				if ((this._DateCheckOut != value))
				{
					this.OnDateCheckOutChanging(value);
					this.SendPropertyChanging();
					this._DateCheckOut = value;
					this.SendPropertyChanged("DateCheckOut");
					this.OnDateCheckOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idComputer", DbType="Int NOT NULL")]
		public int idComputer
		{
			get
			{
				return this._idComputer;
			}
			set
			{
				if ((this._idComputer != value))
				{
					if (this._ComputerOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidComputerChanging(value);
					this.SendPropertyChanging();
					this._idComputer = value;
					this.SendPropertyChanged("idComputer");
					this.OnidComputerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Int NOT NULL")]
		public int status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_totalPrice", DbType="Float")]
		public System.Nullable<double> totalPrice
		{
			get
			{
				return this._totalPrice;
			}
			set
			{
				if ((this._totalPrice != value))
				{
					this.OntotalPriceChanging(value);
					this.SendPropertyChanging();
					this._totalPrice = value;
					this.SendPropertyChanged("totalPrice");
					this.OntotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_discount", DbType="Int")]
		public System.Nullable<int> discount
		{
			get
			{
				return this._discount;
			}
			set
			{
				if ((this._discount != value))
				{
					this.OndiscountChanging(value);
					this.SendPropertyChanging();
					this._discount = value;
					this.SendPropertyChanged("discount");
					this.OndiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bill_BillInfo", Storage="_BillInfos", ThisKey="id", OtherKey="idBill")]
		public EntitySet<BillInfo> BillInfos
		{
			get
			{
				return this._BillInfos;
			}
			set
			{
				this._BillInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ComputerOrder_Bill", Storage="_ComputerOrder", ThisKey="idComputer", OtherKey="id", IsForeignKey=true)]
		public ComputerOrder ComputerOrder
		{
			get
			{
				return this._ComputerOrder.Entity;
			}
			set
			{
				ComputerOrder previousValue = this._ComputerOrder.Entity;
				if (((previousValue != value) 
							|| (this._ComputerOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ComputerOrder.Entity = null;
						previousValue.Bills.Remove(this);
					}
					this._ComputerOrder.Entity = value;
					if ((value != null))
					{
						value.Bills.Add(this);
						this._idComputer = value.id;
					}
					else
					{
						this._idComputer = default(int);
					}
					this.SendPropertyChanged("ComputerOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BillInfos(BillInfo entity)
		{
			this.SendPropertyChanging();
			entity.Bill = this;
		}
		
		private void detach_BillInfos(BillInfo entity)
		{
			this.SendPropertyChanging();
			entity.Bill = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BillInfo")]
	public partial class BillInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _idBill;
		
		private int _idOrder;
		
		private int _count;
		
		private EntityRef<Bill> _Bill;
		
		private EntityRef<Orderr> _Orderr;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidBillChanging(int value);
    partial void OnidBillChanged();
    partial void OnidOrderChanging(int value);
    partial void OnidOrderChanged();
    partial void OncountChanging(int value);
    partial void OncountChanged();
    #endregion
		
		public BillInfo()
		{
			this._Bill = default(EntityRef<Bill>);
			this._Orderr = default(EntityRef<Orderr>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idBill", DbType="Int NOT NULL")]
		public int idBill
		{
			get
			{
				return this._idBill;
			}
			set
			{
				if ((this._idBill != value))
				{
					if (this._Bill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidBillChanging(value);
					this.SendPropertyChanging();
					this._idBill = value;
					this.SendPropertyChanged("idBill");
					this.OnidBillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idOrder", DbType="Int NOT NULL")]
		public int idOrder
		{
			get
			{
				return this._idOrder;
			}
			set
			{
				if ((this._idOrder != value))
				{
					if (this._Orderr.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidOrderChanging(value);
					this.SendPropertyChanging();
					this._idOrder = value;
					this.SendPropertyChanged("idOrder");
					this.OnidOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_count", DbType="Int NOT NULL")]
		public int count
		{
			get
			{
				return this._count;
			}
			set
			{
				if ((this._count != value))
				{
					this.OncountChanging(value);
					this.SendPropertyChanging();
					this._count = value;
					this.SendPropertyChanged("count");
					this.OncountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bill_BillInfo", Storage="_Bill", ThisKey="idBill", OtherKey="id", IsForeignKey=true)]
		public Bill Bill
		{
			get
			{
				return this._Bill.Entity;
			}
			set
			{
				Bill previousValue = this._Bill.Entity;
				if (((previousValue != value) 
							|| (this._Bill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bill.Entity = null;
						previousValue.BillInfos.Remove(this);
					}
					this._Bill.Entity = value;
					if ((value != null))
					{
						value.BillInfos.Add(this);
						this._idBill = value.id;
					}
					else
					{
						this._idBill = default(int);
					}
					this.SendPropertyChanged("Bill");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Orderr_BillInfo", Storage="_Orderr", ThisKey="idOrder", OtherKey="id", IsForeignKey=true)]
		public Orderr Orderr
		{
			get
			{
				return this._Orderr.Entity;
			}
			set
			{
				Orderr previousValue = this._Orderr.Entity;
				if (((previousValue != value) 
							|| (this._Orderr.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Orderr.Entity = null;
						previousValue.BillInfos.Remove(this);
					}
					this._Orderr.Entity = value;
					if ((value != null))
					{
						value.BillInfos.Add(this);
						this._idOrder = value.id;
					}
					else
					{
						this._idOrder = default(int);
					}
					this.SendPropertyChanged("Orderr");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ComputerOrder")]
	public partial class ComputerOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _status;
		
		private EntitySet<Bill> _Bills;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    #endregion
		
		public ComputerOrder()
		{
			this._Bills = new EntitySet<Bill>(new Action<Bill>(this.attach_Bills), new Action<Bill>(this.detach_Bills));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ComputerOrder_Bill", Storage="_Bills", ThisKey="id", OtherKey="idComputer")]
		public EntitySet<Bill> Bills
		{
			get
			{
				return this._Bills;
			}
			set
			{
				this._Bills.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.ComputerOrder = this;
		}
		
		private void detach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.ComputerOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderCategory")]
	public partial class OrderCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<Orderr> _Orderrs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public OrderCategory()
		{
			this._Orderrs = new EntitySet<Orderr>(new Action<Orderr>(this.attach_Orderrs), new Action<Orderr>(this.detach_Orderrs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderCategory_Orderr", Storage="_Orderrs", ThisKey="id", OtherKey="idCategory")]
		public EntitySet<Orderr> Orderrs
		{
			get
			{
				return this._Orderrs;
			}
			set
			{
				this._Orderrs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orderrs(Orderr entity)
		{
			this.SendPropertyChanging();
			entity.OrderCategory = this;
		}
		
		private void detach_Orderrs(Orderr entity)
		{
			this.SendPropertyChanging();
			entity.OrderCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orderr")]
	public partial class Orderr : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private int _idCategory;
		
		private double _price;
		
		private EntitySet<BillInfo> _BillInfos;
		
		private EntityRef<OrderCategory> _OrderCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnidCategoryChanging(int value);
    partial void OnidCategoryChanged();
    partial void OnpriceChanging(double value);
    partial void OnpriceChanged();
    #endregion
		
		public Orderr()
		{
			this._BillInfos = new EntitySet<BillInfo>(new Action<BillInfo>(this.attach_BillInfos), new Action<BillInfo>(this.detach_BillInfos));
			this._OrderCategory = default(EntityRef<OrderCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCategory", DbType="Int NOT NULL")]
		public int idCategory
		{
			get
			{
				return this._idCategory;
			}
			set
			{
				if ((this._idCategory != value))
				{
					if (this._OrderCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidCategoryChanging(value);
					this.SendPropertyChanging();
					this._idCategory = value;
					this.SendPropertyChanged("idCategory");
					this.OnidCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float NOT NULL")]
		public double price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Orderr_BillInfo", Storage="_BillInfos", ThisKey="id", OtherKey="idOrder")]
		public EntitySet<BillInfo> BillInfos
		{
			get
			{
				return this._BillInfos;
			}
			set
			{
				this._BillInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderCategory_Orderr", Storage="_OrderCategory", ThisKey="idCategory", OtherKey="id", IsForeignKey=true)]
		public OrderCategory OrderCategory
		{
			get
			{
				return this._OrderCategory.Entity;
			}
			set
			{
				OrderCategory previousValue = this._OrderCategory.Entity;
				if (((previousValue != value) 
							|| (this._OrderCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderCategory.Entity = null;
						previousValue.Orderrs.Remove(this);
					}
					this._OrderCategory.Entity = value;
					if ((value != null))
					{
						value.Orderrs.Add(this);
						this._idCategory = value.id;
					}
					else
					{
						this._idCategory = default(int);
					}
					this.SendPropertyChanged("OrderCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BillInfos(BillInfo entity)
		{
			this.SendPropertyChanging();
			entity.Orderr = this;
		}
		
		private void detach_BillInfos(BillInfo entity)
		{
			this.SendPropertyChanging();
			entity.Orderr = null;
		}
	}
	
	public partial class USP_GetAccountByUserNameResult
	{
		
		private string _UserName;
		
		private string _DisplayName;
		
		private string _PassWord;
		
		private int _Type;
		
		public USP_GetAccountByUserNameResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this._DisplayName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassWord", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string PassWord
		{
			get
			{
				return this._PassWord;
			}
			set
			{
				if ((this._PassWord != value))
				{
					this._PassWord = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
	}
	
	public partial class USP_GetComputerListResult
	{
		
		private int _id;
		
		private string _name;
		
		private string _status;
		
		public USP_GetComputerListResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL")]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this._name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this._status = value;
				}
			}
		}
	}
	
	public partial class USP_GetListBillByDateResult
	{
		
		private string _Computer;
		
		private System.Nullable<double> _Total_Price;
		
		private System.DateTime _Date_Checkin;
		
		private System.Nullable<System.DateTime> _Date_Checkout;
		
		private System.Nullable<int> _Discount;
		
		public USP_GetListBillByDateResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Computer", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Computer
		{
			get
			{
				return this._Computer;
			}
			set
			{
				if ((this._Computer != value))
				{
					this._Computer = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Total Price]", Storage="_Total_Price", DbType="Float")]
		public System.Nullable<double> Total_Price
		{
			get
			{
				return this._Total_Price;
			}
			set
			{
				if ((this._Total_Price != value))
				{
					this._Total_Price = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Date Checkin]", Storage="_Date_Checkin", DbType="Date NOT NULL")]
		public System.DateTime Date_Checkin
		{
			get
			{
				return this._Date_Checkin;
			}
			set
			{
				if ((this._Date_Checkin != value))
				{
					this._Date_Checkin = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Date Checkout]", Storage="_Date_Checkout", DbType="Date")]
		public System.Nullable<System.DateTime> Date_Checkout
		{
			get
			{
				return this._Date_Checkout;
			}
			set
			{
				if ((this._Date_Checkout != value))
				{
					this._Date_Checkout = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Int")]
		public System.Nullable<int> Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this._Discount = value;
				}
			}
		}
	}
	
	public partial class USP_GetListBillByDateAndPageResult
	{
		
		private int _ID;
		
		private string _Computer;
		
		private System.Nullable<double> _Total_Price;
		
		private System.DateTime _Date_Checkin;
		
		private System.Nullable<System.DateTime> _Date_Checkout;
		
		private System.Nullable<int> _Discount;
		
		public USP_GetListBillByDateAndPageResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Computer", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Computer
		{
			get
			{
				return this._Computer;
			}
			set
			{
				if ((this._Computer != value))
				{
					this._Computer = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Total Price]", Storage="_Total_Price", DbType="Float")]
		public System.Nullable<double> Total_Price
		{
			get
			{
				return this._Total_Price;
			}
			set
			{
				if ((this._Total_Price != value))
				{
					this._Total_Price = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Date Checkin]", Storage="_Date_Checkin", DbType="Date NOT NULL")]
		public System.DateTime Date_Checkin
		{
			get
			{
				return this._Date_Checkin;
			}
			set
			{
				if ((this._Date_Checkin != value))
				{
					this._Date_Checkin = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Date Checkout]", Storage="_Date_Checkout", DbType="Date")]
		public System.Nullable<System.DateTime> Date_Checkout
		{
			get
			{
				return this._Date_Checkout;
			}
			set
			{
				if ((this._Date_Checkout != value))
				{
					this._Date_Checkout = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Int")]
		public System.Nullable<int> Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this._Discount = value;
				}
			}
		}
	}
	
	public partial class USP_GetListBillByDateForReportResult
	{
		
		private string _name;
		
		private System.Nullable<double> _totalPrice;
		
		private System.DateTime _DateCheckIn;
		
		private System.Nullable<System.DateTime> _DateCheckOut;
		
		private System.Nullable<int> _discount;
		
		public USP_GetListBillByDateForReportResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this._name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_totalPrice", DbType="Float")]
		public System.Nullable<double> totalPrice
		{
			get
			{
				return this._totalPrice;
			}
			set
			{
				if ((this._totalPrice != value))
				{
					this._totalPrice = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCheckIn", DbType="Date NOT NULL")]
		public System.DateTime DateCheckIn
		{
			get
			{
				return this._DateCheckIn;
			}
			set
			{
				if ((this._DateCheckIn != value))
				{
					this._DateCheckIn = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCheckOut", DbType="Date")]
		public System.Nullable<System.DateTime> DateCheckOut
		{
			get
			{
				return this._DateCheckOut;
			}
			set
			{
				if ((this._DateCheckOut != value))
				{
					this._DateCheckOut = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_discount", DbType="Int")]
		public System.Nullable<int> discount
		{
			get
			{
				return this._discount;
			}
			set
			{
				if ((this._discount != value))
				{
					this._discount = value;
				}
			}
		}
	}
	
	public partial class USP_GetNumBillByDateResult
	{
		
		private System.Nullable<int> _Column1;
		
		public USP_GetNumBillByDateResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="", Storage="_Column1", DbType="Int")]
		public System.Nullable<int> Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}
	
	public partial class USP_LoginResult
	{
		
		private string _UserName;
		
		private string _DisplayName;
		
		private string _PassWord;
		
		private int _Type;
		
		public USP_LoginResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this._DisplayName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassWord", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string PassWord
		{
			get
			{
				return this._PassWord;
			}
			set
			{
				if ((this._PassWord != value))
				{
					this._PassWord = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
